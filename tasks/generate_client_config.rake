## The MIT License (MIT)
##
## Copyright (c) 2014-2024
## Savin Max <mafei.198@gmail.com>
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included in all
## copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.


desc "Generate configs Sql format file from Excel"
task :generate_client_config => :environment do
  config_dir = File.expand_path("#{FRAMEWORK_ROOT_DIR}/app/config_data/game_data")

  Dir.foreach(config_dir) do |config_file_path|
    extname = File.extname(config_file_path)
    if extname == '.xlsx'
      s = Roo::Excelx.new(File.expand_path(config_dir + '/' + config_file_path))
    elsif extname == '.xls'
      s = Roo::Excel.new(File.expand_path(config_dir + '/'+ config_file_path))
    else
      next
    end

    s.sheets.each do |sheet|
      s.default_sheet = sheet
      content = "-- Generated by generate_client_config.rake #{Time.now}\n"
      file_name = sheet.singularize
      lua_class_name = sheet.singularize.camelcase

      fields_define = []
      field_types = []
      field_names = []
      s.row(2).each do |field|
        name, type = field.split(":")
        field_names << "'#{name}'"
        field_types << type
      end
      content << "if #{lua_class_name} then return #{lua_class_name} end\n"
      content << "#{lua_class_name} = {}\n"
      content << "#{lua_class_name}.keys = {#{field_names.join(", ")}}\n"
      content << "#{lua_class_name}.cache = {}\n"

      values = 3.upto(s.last_row).map do |row|
        row_values = []
        s.row(row).each_with_index do |value, index|
          if ['string', 'text'].include?(field_types[index])
            value = ActiveRecord::Base.sanitize(value)
          end
          if field_types[index] == 'integer'
            if value.blank?
              value = 0
            else
              value = value.to_i
            end
          end
          if field_types[index] == 'float' and value.blank?
            if value.blank?
              value = 0.0
            else
              value = value.to_f
            end
          end
          row_values << value
        end
        "key_#{row - 2} = {#{row_values.join(', ')}}"
      end.join(",\n    ")

      content << "#{lua_class_name}.dict = {\n    #{values}\n}"

content << %Q{
function #{lua_class_name}.find(id)
    return #{lua_class_name}.dict["key_" .. id]
end

function #{lua_class_name}.findOne(searchParams)
    values = #{lua_class_name}.where(searchParams)
    return values[1]
end

function #{lua_class_name}.where(searchParams)
    cacheResult = #{lua_class_name}.cache[searchParams]
    if cacheResult then return cacheResult end

    local values = {}

    local fieldIndexes = {}
    for fieldName,value in pairs(searchParams) do
        for i=1, ##{lua_class_name}.keys do
            if #{lua_class_name}.keys[i] == fieldName then
                fieldIndex[i] = value
                break
            end
        end
    end

    for k, v in pairs(#{lua_class_name}.dict) do
        isMatch = true
        for fieldIndex,fieldValue in pairs(fieldIndexes) do
            if v[fieldIndex] ~= fieldValue then
                isMatch = false
            end
        end
        if isMatch then
            values[#values+1] = v
        end
    end
    #{lua_class_name}.cache[searchParams] = values
    return values
end

function #{lua_class_name}.cleanCache()
    #{lua_class_name}.cache = nil
    return nil
end

function #{lua_class_name}.all()
    return #{lua_class_name}.dict
end
}

      content << "return #{lua_class_name}"

      File.open("#{FRAMEWORK_ROOT_DIR}/client_data/#{file_name}.lua", 'w'){|io| io.write content}
    end
  end
end
