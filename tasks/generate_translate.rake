## The MIT License (MIT)
##
## Copyright (c) 2014-2024
## Savin Max <mafei.198@gmail.com>
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included in all
## copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.

desc "Generate Translate Data from Excel"
task :generate_translate => :environment do
  file_path = File.expand_path("#{FRAMEWORK_ROOT_DIR}/app/config_data/text/Common_text.xls")
  sheets = []

  table_map = {}

  s = Roo::Excel.new(file_path)

  s.sheets.each do |sheet|
    s.default_sheet = sheet
    table_name = "translate_#{sheet.downcase.pluralize}"
    table_map[table_name] = {field_names: [], rows: []}
    field_names = []
    s.row(1).each_with_index do |field, index|
      next unless index >= 2
      table_map[table_name][:field_names] << field.downcase
    end
    2.upto(s.last_row).map do |row|
      row_values = []
      keys = []
      s.row(row).each_with_index do |value, index|
        if index <= 1
          keys << value
          next
        end
        if value == 'NULL' or value == nil
          value = "<<\"\">>"
        else
          value = "<<\"#{value.gsub('"', '\"')}\">>"
        end
        row_values << value
      end
      key = "#{row_values[0].downcase}_#{row_values[1].downcase}"
      key = keys.join("_").downcase
      table_map[table_name][:rows] << row_values.unshift(key)
    end
  end

  File.open("#{FRAMEWORK_ROOT_DIR}/game_server/include/translate_data_names.hrl", 'w') do |io|
    io.puts "%%% Generated by generate_config.rake \n"
    io.puts "-define(TRANSLATE_DATA_NAMES, [\n"
    table_names = table_map.map{|table_name, v| table_name}
    io.puts %Q{    #{table_names.join(",\n    ")}}
    io.puts "])."
  end

  File.open("#{FRAMEWORK_ROOT_DIR}/game_server/include/translate_data_records.hrl", 'w') do |io|
    io.puts "%%% Generated by generate_config.rake \n"
    content = ""
    table_map.each do |table_name, data|
      content << "-record(#{table_name}, {\n"
      size = data[:field_names].size
      data[:field_names].each_with_index do |field, index|
        content << "        #{field}"
        content << ",\n" if index < size - 1
      end
      content << "}).\n\n"
    end
    io.puts content
  end

  `mkdir -p #{FRAMEWORK_ROOT_DIR}/app/generates`
  File.open("#{FRAMEWORK_ROOT_DIR}/app/generates/translate_data.erl", 'w') do |io|
    io.puts "%%% Generated by generate_config.rake \n"
    content = []
    table_map.each do |table_name, data|
      rows = data[:rows].map do |row_values|
        "{#{row_values.first}, {#{table_name}, #{row_values[1, row_values.length - 1].join(', ')}}}"
      end

      content << "{#{table_name}, [#{rows.join(', ')}]}"
    end
    io.puts %Q{
-module(translate_data).
-export([find/2]).

-define(MAP, [#{content.join(",")}]).

get_tuple(Table) ->
    case lists:keyfind(Table, 1, ?MAP) of
        false -> [];
        {Table, Value} -> Value
    end.

find(Table, Key) ->
    case lists:keyfind(Key, 1, get_tuple(Table)) of
        false -> undefined;
        {Key, Value} -> Value
    end.
    }
  end
end
